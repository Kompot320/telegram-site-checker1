import asyncio
import datetime
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from aiohttp import web
import os

API_TOKEN = '8158547630:AAHXDP-vH6Y2T6IU3Du__n3MjA55ETZ30Kg'  # –í—Å—Ç–∞–≤–ª–µ–Ω —Ç–≤–æ–π —Ç–æ–∫–µ–Ω

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_sites = {}       # {user_id: [url1, url2, ...]}
user_statuses = {}    # {user_id: {url: bool}}

CHECK_INTERVAL = 3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (60 –º–∏–Ω—É—Ç)


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞
def log_status_change(user_id, url, is_up):
    status = "UP" if is_up else "DOWN"
    time_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("down_log.txt", "a") as log_file:
        log_file.write(f"{time_str} | User {user_id} | {url} is {status}\n")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
async def check_site(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                return resp.status < 400
    except:
        return False


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∞–π—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_site_status(user_id, bot, url, is_up):
    msg = f"‚úÖ –°–∞–π—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω: {url}" if is_up else f"‚õî –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {url}"
    await bot.send_message(chat_id=user_id, text=msg)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
async def check_all_users(bot):
    while True:
        for user_id, urls in user_sites.items():
            for url in urls:
                is_up = await check_site(url)
                last_status = user_statuses[user_id].get(url)

                if last_status is None:
                    user_statuses[user_id][url] = is_up
                elif last_status != is_up:
                    user_statuses[user_id][url] = is_up
                    log_status_change(user_id, url, is_up)
                    await send_site_status(user_id, bot, url, is_up)

        await asyncio.sleep(CHECK_INTERVAL)


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_sites:
        user_sites[user_id] = ['https://example.com']
        user_statuses[user_id] = {}

    buttons = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data='check_now')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤", callback_data='status')],
        [InlineKeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É", callback_data='stop')]
    ]
    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if user_id not in user_sites:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        return

    if query.data == 'check_now':
        messages = []
        for url in user_sites[user_id]:
            is_up = await check_site(url)
            user_statuses[user_id][url] = is_up
            messages.append(f"{url} ‚Äî {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if is_up else '‚õî –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        await query.edit_message_text("–†–µ–∑—É–ª—å—Ç–∞—Ç:\n" + '\n'.join(messages))

    elif query.data == 'status':
        messages = []
        for url in user_sites[user_id]:
            status = user_statuses[user_id].get(url)
            status_str = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" if status is None else ("‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if status else "‚õî –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            messages.append(f"{url} ‚Äî {status_str}")
        await query.edit_message_text("–°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤:\n" + '\n'.join(messages))

    elif query.data == 'stop':
        user_sites[user_id] = []
        await query.edit_message_text("‚õî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")


# –ù–∞—Å—Ç—Ä–æ–∏–º Webhook –∏ aiohttp —Å–µ—Ä–≤–µ—Ä
async def run_webhook(application):
    webhook_url = "https://telegram-site-checker1.onrender.com/webhook"  # –í—Å—Ç–∞–≤–ª–µ–Ω —Ç–≤–æ–π URL
    await application.bot.set_webhook(webhook_url)

    async def handler(request):
        request_body = await request.text()
        await application.update_queue.put(request_body)
        return web.Response(text="ok")

    app = web.Application()
    app.router.add_post('/webhook', handler)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.environ.get("PORT", 8080)))
    await site.start()


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤
async def main():
    app = Application.builder().token(API_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(check_all_users(app.bot))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Webhook
    await run_webhook(app)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    await app.run_polling()


if __name__ == '__main__':
    asyncio.run(main())
