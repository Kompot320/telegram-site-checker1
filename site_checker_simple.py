import requests
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, JobQueue, ApplicationBuilder
import nest_asyncio

nest_asyncio.apply()

BOT_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–°–Æ–î–ê"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

active_users = set()

class SiteChecker:
    def __init__(self):
        self.sites = self.load_sites()

    def load_sites(self):
        try:
            with open('sites_list.txt', 'r') as f:
                return [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            return []

    def check_site(self, url):
        try:
            if not url.startswith(('http://', 'https://')):
                url = 'https://' + url
            response = requests.get(url, timeout=10)
            return response.status_code == 200
        except:
            return False

    async def auto_check(self, context: ContextTypes.DEFAULT_TYPE):
        down_sites = []
        for site in self.sites:
            if not self.check_site(site):
                down_sites.append(site)

        if not down_sites:
            return

        text = f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')}):\n"
        text += "\n".join(down_sites)

        for user_id in active_users:
            try:
                await context.bot.send_message(chat_id=user_id, text=text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")

    async def manual_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        report = [f"üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')}):"]
        for site in self.sites:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if self.check_site(site) else "‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
            report.append(f"{site}: {status}")

        await context.bot.send_message(chat_id=update.effective_chat.id, text="\n".join(report))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_chat.id
        active_users.add(user_id)
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. –û—Ç–ø—Ä–∞–≤–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Å–∞–π—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /stop"
        )

    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_chat.id
        if user_id in active_users:
            active_users.remove(user_id)
            await context.bot.send_message(chat_id=user_id, text="üõë –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        else:
            await context.bot.send_message(chat_id=user_id, text="‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    checker = SiteChecker()

    app.add_handler(CommandHandler("start", checker.start_command))
    app.add_handler(CommandHandler("check", checker.manual_check))
    app.add_handler(CommandHandler("stop", checker.stop_command))

    app.job_queue.run_repeating(checker.auto_check, interval=3600, first=10)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    import asyncio

    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()

