import asyncio
from datetime import datetime
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ)
DEFAULT_CONFIG = {
    'BOT_TOKEN': 'your_bot_token',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    'CHAT_ID': 'your_chat_id'       # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
}

class SiteChecker:
    def __init__(self, config):
        self.config = config
        self.sites = self.load_sites()

    def load_sites(self):
        try:
            with open('sites_list.txt', 'r') as f:
                return [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            print("‚ö†Ô∏è –§–∞–π–ª sites_list.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []

    def check_site(self, url):
        try:
            if not url.startswith(('http://', 'https://')):
                url = 'https://' + url
            response = requests.get(url, timeout=10)
            return response.status_code == 200
        except:
            return False

    async def send_report(self, context: ContextTypes.DEFAULT_TYPE):
        if not self.sites:
            await context.bot.send_message(
                chat_id=self.config['CHAT_ID'],
                text="‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç!"
            )
            return

        report = [f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}:"]
        for site in self.sites:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if self.check_site(site) else "‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
            report.append(f"{site}: {status}")

        await context.bot.send_message(
            chat_id=self.config['CHAT_ID'],
            text="\n".join(report)
        )

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üü¢ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∞–π—Ç–æ–≤..."
        )
        await self.send_report(context)

    async def manual_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.send_report(context)

    async def auto_check(self, context: ContextTypes.DEFAULT_TYPE):
        await self.send_report(context)

async def main():
    checker = SiteChecker(DEFAULT_CONFIG)

    app = Application.builder().token(DEFAULT_CONFIG['BOT_TOKEN']).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç—ã –≤—Ä—É—á–Ω—É—é"),
        BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É")
    ])

    app.add_handler(CommandHandler("start", checker.start))
    app.add_handler(CommandHandler("check", checker.manual_check))  # —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    app.add_handler(CommandHandler("stop", checker.auto_check))  # –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É
    app.job_queue.run_repeating(checker.auto_check, interval=3600, first=10)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    asyncio.run(main())
