import logging
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from datetime import datetime

API_TOKEN = '8158547630:AAHXDP-vH6Y2T6IU3Du__n3MjA55ETZ30Kg'  # ‚Üê –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–º —Å–∞–π—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_sites = {}
user_status = {}
user_tasks = {}

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def get_main_keyboard():
    buttons = [
        InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤", callback_data="status"),
        InlineKeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="stop")
    ]
    return InlineKeyboardMarkup(row_width=1).add(*buttons)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞
async def check_site(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                return response.status == 200
    except Exception:
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
async def notify_changes(user_id):
    for url in user_sites[user_id]:
        is_up = await check_site(url)
        if user_status[user_id].get(url) != is_up:
            status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if is_up else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            await bot.send_message(user_id, f"‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: {url}\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
            user_status[user_id][url] = is_up
            if not is_up:
                with open("down_log.txt", "a", encoding="utf-8") as f:
                    f.write(f"{datetime.now()} ‚Äî {url} —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏
async def monitoring_task(user_id):
    while True:
        await notify_changes(user_id)
        await asyncio.sleep(60)

# /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å.")
    if user_id in user_tasks and not user_tasks[user_id].done():
        user_tasks[user_id].cancel()
    user_sites[user_id] = []
    user_status[user_id] = {}

# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
@dp.message_handler(lambda message: message.from_user.id in user_sites and not user_sites[message.from_user.id])
async def receive_sites(message: types.Message):
    user_id = message.from_user.id
    text = message.text.replace(',', ' ').split()
    user_sites[user_id] = text
    user_status[user_id] = {}
    await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!", reply_markup=get_main_keyboard())
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    for url in text:
        is_up = await check_site(url)
        user_status[user_id][url] = is_up
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    task = asyncio.create_task(monitoring_task(user_id))
    user_tasks[user_id] = task

# Inline-–∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data in ["check_now", "status", "stop"])
async def callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if data == "check_now":
        await notify_changes(user_id)
        await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    elif data == "status":
        text = ""
        for url in user_sites.get(user_id, []):
            status = user_status[user_id].get(url, False)
            emoji = "üü¢" if status else "üî¥"
            text += f"{emoji} {url}\n"
        await bot.send_message(user_id, f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤:\n{text}")

    elif data == "stop":
        if user_id in user_tasks:
            user_tasks[user_id].cancel()
            await bot.send_message(user_id, "‚õî –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await bot.send_message(user_id, "‚ö†Ô∏è –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

    await bot.answer_callback_query(callback_query.id)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
